
HCSR04_PWidth_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080032d4  080032d4  000132d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003318  08003318  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003318  08003318  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003318  08003318  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003318  08003318  00013318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800331c  0800331c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000018  08003338  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003338  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a580  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a76  00000000  00000000  0002a604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  0002c080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000946  00000000  00000000  0002cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000136d3  00000000  00000000  0002d5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c3f2  00000000  00000000  00040c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006dd03  00000000  00000000  0004d07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003344  00000000  00000000  000bad80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000be0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	080032bc 	.word	0x080032bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	080032bc 	.word	0x080032bc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af02      	add	r7, sp, #8
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f023 030f 	bic.w	r3, r3, #15
 800093c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	011b      	lsls	r3, r3, #4
 8000942:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	f043 030c 	orr.w	r3, r3, #12
 800094a:	b2db      	uxtb	r3, r3
 800094c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	b2db      	uxtb	r3, r3
 8000956:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000958:	7bbb      	ldrb	r3, [r7, #14]
 800095a:	f043 030c 	orr.w	r3, r3, #12
 800095e:	b2db      	uxtb	r3, r3
 8000960:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000962:	7bbb      	ldrb	r3, [r7, #14]
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	b2db      	uxtb	r3, r3
 800096a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800096c:	f107 0208 	add.w	r2, r7, #8
 8000970:	2364      	movs	r3, #100	; 0x64
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2304      	movs	r3, #4
 8000976:	214e      	movs	r1, #78	; 0x4e
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <lcd_send_cmd+0x5c>)
 800097a:	f001 f8e9 	bl	8001b50 <HAL_I2C_Master_Transmit>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000034 	.word	0x20000034

0800098c <lcd_send_data>:

void lcd_send_data (char data)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af02      	add	r7, sp, #8
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	f023 030f 	bic.w	r3, r3, #15
 800099c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	011b      	lsls	r3, r3, #4
 80009a2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	f043 030d 	orr.w	r3, r3, #13
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	f043 0309 	orr.w	r3, r3, #9
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80009b8:	7bbb      	ldrb	r3, [r7, #14]
 80009ba:	f043 030d 	orr.w	r3, r3, #13
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80009c2:	7bbb      	ldrb	r3, [r7, #14]
 80009c4:	f043 0309 	orr.w	r3, r3, #9
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009cc:	f107 0208 	add.w	r2, r7, #8
 80009d0:	2364      	movs	r3, #100	; 0x64
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2304      	movs	r3, #4
 80009d6:	214e      	movs	r1, #78	; 0x4e
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <lcd_send_data+0x5c>)
 80009da:	f001 f8b9 	bl	8001b50 <HAL_I2C_Master_Transmit>
}
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000034 	.word	0x20000034

080009ec <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
    switch (row)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d003      	beq.n	8000a04 <lcd_put_cur+0x18>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d005      	beq.n	8000a0e <lcd_put_cur+0x22>
 8000a02:	e009      	b.n	8000a18 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a0a:	603b      	str	r3, [r7, #0]
            break;
 8000a0c:	e004      	b.n	8000a18 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000a14:	603b      	str	r3, [r7, #0]
            break;
 8000a16:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff85 	bl	800092c <lcd_send_cmd>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <lcd_init>:


void lcd_init (void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000a2e:	2032      	movs	r0, #50	; 0x32
 8000a30:	f000 fc8c 	bl	800134c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a34:	2030      	movs	r0, #48	; 0x30
 8000a36:	f7ff ff79 	bl	800092c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000a3a:	2005      	movs	r0, #5
 8000a3c:	f000 fc86 	bl	800134c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a40:	2030      	movs	r0, #48	; 0x30
 8000a42:	f7ff ff73 	bl	800092c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000a46:	2001      	movs	r0, #1
 8000a48:	f000 fc80 	bl	800134c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a4c:	2030      	movs	r0, #48	; 0x30
 8000a4e:	f7ff ff6d 	bl	800092c <lcd_send_cmd>
	HAL_Delay(10);
 8000a52:	200a      	movs	r0, #10
 8000a54:	f000 fc7a 	bl	800134c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000a58:	2020      	movs	r0, #32
 8000a5a:	f7ff ff67 	bl	800092c <lcd_send_cmd>
	HAL_Delay(10);
 8000a5e:	200a      	movs	r0, #10
 8000a60:	f000 fc74 	bl	800134c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000a64:	2028      	movs	r0, #40	; 0x28
 8000a66:	f7ff ff61 	bl	800092c <lcd_send_cmd>
	HAL_Delay(1);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f000 fc6e 	bl	800134c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a70:	2008      	movs	r0, #8
 8000a72:	f7ff ff5b 	bl	800092c <lcd_send_cmd>
	HAL_Delay(1);
 8000a76:	2001      	movs	r0, #1
 8000a78:	f000 fc68 	bl	800134c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff ff55 	bl	800092c <lcd_send_cmd>
	HAL_Delay(1);
 8000a82:	2001      	movs	r0, #1
 8000a84:	f000 fc62 	bl	800134c <HAL_Delay>
	HAL_Delay(1);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f000 fc5f 	bl	800134c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a8e:	2006      	movs	r0, #6
 8000a90:	f7ff ff4c 	bl	800092c <lcd_send_cmd>
	HAL_Delay(1);
 8000a94:	2001      	movs	r0, #1
 8000a96:	f000 fc59 	bl	800134c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a9a:	200c      	movs	r0, #12
 8000a9c:	f7ff ff46 	bl	800092c <lcd_send_cmd>
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000aac:	e006      	b.n	8000abc <lcd_send_string+0x18>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff68 	bl	800098c <lcd_send_data>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f4      	bne.n	8000aae <lcd_send_string+0xa>
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay (uint16_t time)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <delay+0x2c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000ae2:	bf00      	nop
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <delay+0x2c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d3f9      	bcc.n	8000ae4 <delay+0x14>
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	20000088 	.word	0x20000088

08000b00 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOA

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7f1b      	ldrb	r3, [r3, #28]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	f040 80af 	bne.w	8000c70 <HAL_TIM_IC_CaptureCallback+0x170>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000b12:	4b5b      	ldr	r3, [pc, #364]	; (8000c80 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d11a      	bne.n	8000b50 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f002 f94f 	bl	8002dc0 <HAL_TIM_ReadCapturedValue>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4a57      	ldr	r2, [pc, #348]	; (8000c84 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000b26:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000b28:	4b55      	ldr	r3, [pc, #340]	; (8000c80 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	6a1a      	ldr	r2, [r3, #32]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f022 020a 	bic.w	r2, r2, #10
 8000b3c:	621a      	str	r2, [r3, #32]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6a1a      	ldr	r2, [r3, #32]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f042 0202 	orr.w	r2, r2, #2
 8000b4c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000b4e:	e08f      	b.n	8000c70 <HAL_TIM_IC_CaptureCallback+0x170>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000b50:	4b4b      	ldr	r3, [pc, #300]	; (8000c80 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	f040 808b 	bne.w	8000c70 <HAL_TIM_IC_CaptureCallback+0x170>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f002 f92f 	bl	8002dc0 <HAL_TIM_ReadCapturedValue>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4a48      	ldr	r2, [pc, #288]	; (8000c88 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000b66:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000b70:	4b45      	ldr	r3, [pc, #276]	; (8000c88 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b43      	ldr	r3, [pc, #268]	; (8000c84 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d907      	bls.n	8000b8c <HAL_TIM_IC_CaptureCallback+0x8c>
				Difference = IC_Val2-IC_Val1;
 8000b7c:	4b42      	ldr	r3, [pc, #264]	; (8000c88 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b40      	ldr	r3, [pc, #256]	; (8000c84 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	4a41      	ldr	r2, [pc, #260]	; (8000c8c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	e00f      	b.n	8000bac <HAL_TIM_IC_CaptureCallback+0xac>
			else if (IC_Val1 > IC_Val2)
 8000b8c:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b3d      	ldr	r3, [pc, #244]	; (8000c88 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d909      	bls.n	8000bac <HAL_TIM_IC_CaptureCallback+0xac>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000b98:	4b3b      	ldr	r3, [pc, #236]	; (8000c88 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000ba6:	33ff      	adds	r3, #255	; 0xff
 8000ba8:	4a38      	ldr	r2, [pc, #224]	; (8000c8c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000baa:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000bac:	4b37      	ldr	r3, [pc, #220]	; (8000c8c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fc0f 	bl	80003d4 <__aeabi_ui2d>
 8000bb6:	a330      	add	r3, pc, #192	; (adr r3, 8000c78 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbc:	f7ff fc84 	bl	80004c8 <__aeabi_dmul>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f04f 0200 	mov.w	r2, #0
 8000bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd0:	f7ff fda4 	bl	800071c <__aeabi_ddiv>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	4610      	mov	r0, r2
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f7ff fe86 	bl	80008ec <__aeabi_d2uiz>
 8000be0:	4603      	mov	r3, r0
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000be6:	701a      	strb	r2, [r3, #0]
			Distance = (c-d)/(a-b)*Distance + (a*d - b*c)/(a-b);
 8000be8:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	1ad2      	subs	r2, r2, r3
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8000bf4:	6819      	ldr	r1, [r3, #0]
 8000bf6:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	1acb      	subs	r3, r1, r3
 8000bfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000c04:	7812      	ldrb	r2, [r2, #0]
 8000c06:	fb02 f303 	mul.w	r3, r2, r3
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4921      	ldr	r1, [pc, #132]	; (8000c98 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000c12:	6809      	ldr	r1, [r1, #0]
 8000c14:	fb03 f101 	mul.w	r1, r3, r1
 8000c18:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	481d      	ldr	r0, [pc, #116]	; (8000c94 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000c1e:	6800      	ldr	r0, [r0, #0]
 8000c20:	fb00 f303 	mul.w	r3, r0, r3
 8000c24:	1ac9      	subs	r1, r1, r3
 8000c26:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8000c28:	6818      	ldr	r0, [r3, #0]
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	1ac3      	subs	r3, r0, r3
 8000c30:	fb91 f3f3 	sdiv	r3, r1, r3
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4413      	add	r3, r2
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000c3c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6a1a      	ldr	r2, [r3, #32]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f022 020a 	bic.w	r2, r2, #10
 8000c52:	621a      	str	r2, [r3, #32]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6a12      	ldr	r2, [r2, #32]
 8000c5e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	68da      	ldr	r2, [r3, #12]
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 0202 	bic.w	r2, r2, #2
 8000c6e:	60da      	str	r2, [r3, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	b020c49c 	.word	0xb020c49c
 8000c7c:	3fa16872 	.word	0x3fa16872
 8000c80:	200000d4 	.word	0x200000d4
 8000c84:	200000c8 	.word	0x200000c8
 8000c88:	200000cc 	.word	0x200000cc
 8000c8c:	200000d0 	.word	0x200000d0
 8000c90:	200000d5 	.word	0x200000d5
 8000c94:	200000d8 	.word	0x200000d8
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000004 	.word	0x20000004
 8000ca4:	20000088 	.word	0x20000088

08000ca8 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000cac:	2201      	movs	r2, #1
 8000cae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb2:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <HCSR04_Read+0x38>)
 8000cb4:	f000 fe00 	bl	80018b8 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000cb8:	200a      	movs	r0, #10
 8000cba:	f7ff ff09 	bl	8000ad0 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc4:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <HCSR04_Read+0x38>)
 8000cc6:	f000 fdf7 	bl	80018b8 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HCSR04_Read+0x3c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <HCSR04_Read+0x3c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f042 0202 	orr.w	r2, r2, #2
 8000cd8:	60da      	str	r2, [r3, #12]
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40010800 	.word	0x40010800
 8000ce4:	20000088 	.word	0x20000088

08000ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cec:	f000 facc 	bl	8001288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf0:	f000 f868 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf4:	f000 f930 	bl	8000f58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cf8:	f000 f8aa 	bl	8000e50 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000cfc:	f000 f8d6 	bl	8000eac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8000d00:	f7ff fe93 	bl	8000a2a <lcd_init>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d04:	2100      	movs	r1, #0
 8000d06:	4828      	ldr	r0, [pc, #160]	; (8000da8 <main+0xc0>)
 8000d08:	f001 fe4e 	bl	80029a8 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_put_cur(0,4);
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff fe6c 	bl	80009ec <lcd_put_cur>
	  lcd_send_string("Khoang cach ");
 8000d14:	4825      	ldr	r0, [pc, #148]	; (8000dac <main+0xc4>)
 8000d16:	f7ff fec5 	bl	8000aa4 <lcd_send_string>
	  lcd_put_cur(1,4);
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff fe65 	bl	80009ec <lcd_put_cur>
	  lcd_send_string("d = ");
 8000d22:	4823      	ldr	r0, [pc, #140]	; (8000db0 <main+0xc8>)
 8000d24:	f7ff febe 	bl	8000aa4 <lcd_send_string>
	  lcd_put_cur(1,8);
 8000d28:	2108      	movs	r1, #8
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff fe5e 	bl	80009ec <lcd_put_cur>

	  HCSR04_Read();
 8000d30:	f7ff ffba 	bl	8000ca8 <HCSR04_Read>

//	  Distance = ((c-d)*Distance + a*d - b*c)/(a-b);

	  lcd_send_data((Distance/100) + 48);   // 100th pos
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <main+0xcc>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4a1f      	ldr	r2, [pc, #124]	; (8000db8 <main+0xd0>)
 8000d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	3330      	adds	r3, #48	; 0x30
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fe20 	bl	800098c <lcd_send_data>
	  lcd_send_data(((Distance/10)%10) + 48);  // 10th pos
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <main+0xcc>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4a1a      	ldr	r2, [pc, #104]	; (8000dbc <main+0xd4>)
 8000d52:	fba2 2303 	umull	r2, r3, r2, r3
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <main+0xd4>)
 8000d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d60:	08d9      	lsrs	r1, r3, #3
 8000d62:	460b      	mov	r3, r1
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	440b      	add	r3, r1
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	3330      	adds	r3, #48	; 0x30
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fe0a 	bl	800098c <lcd_send_data>
	  lcd_send_data((Distance%10)+48);  // 1st pos
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <main+0xcc>)
 8000d7a:	781a      	ldrb	r2, [r3, #0]
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <main+0xd4>)
 8000d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d82:	08d9      	lsrs	r1, r3, #3
 8000d84:	460b      	mov	r3, r1
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	3330      	adds	r3, #48	; 0x30
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fdf9 	bl	800098c <lcd_send_data>
	  lcd_send_string(" cm");
 8000d9a:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <main+0xd8>)
 8000d9c:	f7ff fe82 	bl	8000aa4 <lcd_send_string>
	  HAL_Delay(200);
 8000da0:	20c8      	movs	r0, #200	; 0xc8
 8000da2:	f000 fad3 	bl	800134c <HAL_Delay>
	  lcd_put_cur(0,4);
 8000da6:	e7b1      	b.n	8000d0c <main+0x24>
 8000da8:	20000088 	.word	0x20000088
 8000dac:	080032d4 	.word	0x080032d4
 8000db0:	080032e4 	.word	0x080032e4
 8000db4:	200000d5 	.word	0x200000d5
 8000db8:	51eb851f 	.word	0x51eb851f
 8000dbc:	cccccccd 	.word	0xcccccccd
 8000dc0:	080032ec 	.word	0x080032ec

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b090      	sub	sp, #64	; 0x40
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	2228      	movs	r2, #40	; 0x28
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 fa45 	bl	8003262 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de6:	2301      	movs	r3, #1
 8000de8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df4:	2301      	movs	r3, #1
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e02:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 0318 	add.w	r3, r7, #24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 f999 	bl	8002144 <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e18:	f000 f8ea 	bl	8000ff0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e20:	2302      	movs	r3, #2
 8000e22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2102      	movs	r1, #2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 fc06 	bl	8002648 <HAL_RCC_ClockConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e42:	f000 f8d5 	bl	8000ff0 <Error_Handler>
  }
}
 8000e46:	bf00      	nop
 8000e48:	3740      	adds	r7, #64	; 0x40
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e56:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <MX_I2C1_Init+0x54>)
 8000e58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e5c:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <MX_I2C1_Init+0x58>)
 8000e5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e8e:	f000 fd2b 	bl	80018e8 <HAL_I2C_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e98:	f000 f8aa 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000034 	.word	0x20000034
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	000186a0 	.word	0x000186a0

08000eac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ec8:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <MX_TIM1_Init+0xa4>)
 8000eca:	4a22      	ldr	r2, [pc, #136]	; (8000f54 <MX_TIM1_Init+0xa8>)
 8000ecc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <MX_TIM1_Init+0xa4>)
 8000ed0:	2247      	movs	r2, #71	; 0x47
 8000ed2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <MX_TIM1_Init+0xa4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_TIM1_Init+0xa4>)
 8000edc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ee0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_TIM1_Init+0xa4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_TIM1_Init+0xa4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_TIM1_Init+0xa4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000ef4:	4816      	ldr	r0, [pc, #88]	; (8000f50 <MX_TIM1_Init+0xa4>)
 8000ef6:	f001 fd2b 	bl	8002950 <HAL_TIM_IC_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f00:	f000 f876 	bl	8000ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4619      	mov	r1, r3
 8000f12:	480f      	ldr	r0, [pc, #60]	; (8000f50 <MX_TIM1_Init+0xa4>)
 8000f14:	f002 f94f 	bl	80031b6 <HAL_TIMEx_MasterConfigSynchronization>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f1e:	f000 f867 	bl	8000ff0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f26:	2301      	movs	r3, #1
 8000f28:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_TIM1_Init+0xa4>)
 8000f3a:	f001 fea5 	bl	8002c88 <HAL_TIM_IC_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000f44:	f000 f854 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000088 	.word	0x20000088
 8000f54:	40012c00 	.word	0x40012c00

08000f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <MX_GPIO_Init+0x90>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <MX_GPIO_Init+0x90>)
 8000f72:	f043 0320 	orr.w	r3, r3, #32
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_GPIO_Init+0x90>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0320 	and.w	r3, r3, #32
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_GPIO_Init+0x90>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <MX_GPIO_Init+0x90>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_GPIO_Init+0x90>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_GPIO_Init+0x90>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a11      	ldr	r2, [pc, #68]	; (8000fe8 <MX_GPIO_Init+0x90>)
 8000fa2:	f043 0308 	orr.w	r3, r3, #8
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_GPIO_Init+0x90>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0308 	and.w	r3, r3, #8
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <MX_GPIO_Init+0x94>)
 8000fbc:	f000 fc7c 	bl	80018b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_GPIO_Init+0x94>)
 8000fda:	f000 fae9 	bl	80015b0 <HAL_GPIO_Init>

}
 8000fde:	bf00      	nop
 8000fe0:	3720      	adds	r7, #32
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010800 	.word	0x40010800

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_MspInit+0x5c>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	4a14      	ldr	r2, [pc, #80]	; (8001058 <HAL_MspInit+0x5c>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6193      	str	r3, [r2, #24]
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_MspInit+0x5c>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_MspInit+0x5c>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <HAL_MspInit+0x5c>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_MspInit+0x5c>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_MspInit+0x60>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_MspInit+0x60>)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	40021000 	.word	0x40021000
 800105c:	40010000 	.word	0x40010000

08001060 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a15      	ldr	r2, [pc, #84]	; (80010d0 <HAL_I2C_MspInit+0x70>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d123      	bne.n	80010c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HAL_I2C_MspInit+0x74>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <HAL_I2C_MspInit+0x74>)
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <HAL_I2C_MspInit+0x74>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001098:	23c0      	movs	r3, #192	; 0xc0
 800109a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109c:	2312      	movs	r3, #18
 800109e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4619      	mov	r1, r3
 80010aa:	480b      	ldr	r0, [pc, #44]	; (80010d8 <HAL_I2C_MspInit+0x78>)
 80010ac:	f000 fa80 	bl	80015b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_I2C_MspInit+0x74>)
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_I2C_MspInit+0x74>)
 80010b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ba:	61d3      	str	r3, [r2, #28]
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_I2C_MspInit+0x74>)
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010c8:	bf00      	nop
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40005400 	.word	0x40005400
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010c00 	.word	0x40010c00

080010dc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a1a      	ldr	r2, [pc, #104]	; (8001160 <HAL_TIM_IC_MspInit+0x84>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d12c      	bne.n	8001156 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_TIM_IC_MspInit+0x88>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a18      	ldr	r2, [pc, #96]	; (8001164 <HAL_TIM_IC_MspInit+0x88>)
 8001102:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_TIM_IC_MspInit+0x88>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_TIM_IC_MspInit+0x88>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <HAL_TIM_IC_MspInit+0x88>)
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_TIM_IC_MspInit+0x88>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800112c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001130:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4619      	mov	r1, r3
 8001140:	4809      	ldr	r0, [pc, #36]	; (8001168 <HAL_TIM_IC_MspInit+0x8c>)
 8001142:	f000 fa35 	bl	80015b0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	201b      	movs	r0, #27
 800114c:	f000 f9f9 	bl	8001542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001150:	201b      	movs	r0, #27
 8001152:	f000 fa12 	bl	800157a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40012c00 	.word	0x40012c00
 8001164:	40021000 	.word	0x40021000
 8001168:	40010800 	.word	0x40010800

0800116c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <HardFault_Handler+0x4>

0800117e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <MemManage_Handler+0x4>

08001184 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <BusFault_Handler+0x4>

0800118a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <UsageFault_Handler+0x4>

08001190 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b8:	f000 f8ac 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}

080011c0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <TIM1_CC_IRQHandler+0x10>)
 80011c6:	f001 fc57 	bl	8002a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000088 	.word	0x20000088

080011d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <SystemInit+0x5c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <SystemInit+0x5c>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <SystemInit+0x5c>)
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	4911      	ldr	r1, [pc, #68]	; (8001230 <SystemInit+0x5c>)
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <SystemInit+0x60>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <SystemInit+0x5c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <SystemInit+0x5c>)
 80011f6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <SystemInit+0x5c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SystemInit+0x5c>)
 8001206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800120a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <SystemInit+0x5c>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <SystemInit+0x5c>)
 8001212:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001216:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SystemInit+0x5c>)
 800121a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800121e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SystemInit+0x64>)
 8001222:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001226:	609a      	str	r2, [r3, #8]
#endif 
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	40021000 	.word	0x40021000
 8001234:	f8ff0000 	.word	0xf8ff0000
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800123c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800123e:	e003      	b.n	8001248 <LoopCopyDataInit>

08001240 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001242:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001244:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001246:	3104      	adds	r1, #4

08001248 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001248:	480a      	ldr	r0, [pc, #40]	; (8001274 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800124c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800124e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001250:	d3f6      	bcc.n	8001240 <CopyDataInit>
  ldr r2, =_sbss
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001254:	e002      	b.n	800125c <LoopFillZerobss>

08001256 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001258:	f842 3b04 	str.w	r3, [r2], #4

0800125c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800125e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001260:	d3f9      	bcc.n	8001256 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001262:	f7ff ffb7 	bl	80011d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001266:	f002 f805 	bl	8003274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800126a:	f7ff fd3d 	bl	8000ce8 <main>
  bx lr
 800126e:	4770      	bx	lr
  ldr r3, =_sidata
 8001270:	08003320 	.word	0x08003320
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001278:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 800127c:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8001280:	200000e0 	.word	0x200000e0

08001284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC1_2_IRQHandler>
	...

08001288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_Init+0x28>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_Init+0x28>)
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 f947 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 f808 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a4:	f7ff feaa 	bl	8000ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40022000 	.word	0x40022000

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f95f 	bl	8001596 <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 f927 	bl	8001542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000000c 	.word	0x2000000c
 800130c:	20000014 	.word	0x20000014
 8001310:	20000010 	.word	0x20000010

08001314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_IncTick+0x1c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_IncTick+0x20>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a03      	ldr	r2, [pc, #12]	; (8001334 <HAL_IncTick+0x20>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000014 	.word	0x20000014
 8001334:	200000dc 	.word	0x200000dc

08001338 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <HAL_GetTick+0x10>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	200000dc 	.word	0x200000dc

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff fff0 	bl	8001338 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d005      	beq.n	8001372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_Delay+0x44>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001372:	bf00      	nop
 8001374:	f7ff ffe0 	bl	8001338 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8f7      	bhi.n	8001374 <HAL_Delay+0x28>
  {
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000014 	.word	0x20000014

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db0b      	blt.n	8001422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	4906      	ldr	r1, [pc, #24]	; (800142c <__NVIC_EnableIRQ+0x34>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2001      	movs	r0, #1
 800141a:	fa00 f202 	lsl.w	r2, r0, r2
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f7ff ff90 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff2d 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff42 	bl	80013dc <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff90 	bl	8001484 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5f 	bl	8001430 <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff35 	bl	80013f8 <__NVIC_EnableIRQ>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffa2 	bl	80014e8 <SysTick_Config>
 80015a4:	4603      	mov	r3, r0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b08b      	sub	sp, #44	; 0x2c
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c2:	e169      	b.n	8001898 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015c4:	2201      	movs	r2, #1
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	429a      	cmp	r2, r3
 80015de:	f040 8158 	bne.w	8001892 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a9a      	ldr	r2, [pc, #616]	; (8001850 <HAL_GPIO_Init+0x2a0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d05e      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
 80015ec:	4a98      	ldr	r2, [pc, #608]	; (8001850 <HAL_GPIO_Init+0x2a0>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d875      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 80015f2:	4a98      	ldr	r2, [pc, #608]	; (8001854 <HAL_GPIO_Init+0x2a4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d058      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
 80015f8:	4a96      	ldr	r2, [pc, #600]	; (8001854 <HAL_GPIO_Init+0x2a4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d86f      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 80015fe:	4a96      	ldr	r2, [pc, #600]	; (8001858 <HAL_GPIO_Init+0x2a8>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d052      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
 8001604:	4a94      	ldr	r2, [pc, #592]	; (8001858 <HAL_GPIO_Init+0x2a8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d869      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 800160a:	4a94      	ldr	r2, [pc, #592]	; (800185c <HAL_GPIO_Init+0x2ac>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d04c      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
 8001610:	4a92      	ldr	r2, [pc, #584]	; (800185c <HAL_GPIO_Init+0x2ac>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d863      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 8001616:	4a92      	ldr	r2, [pc, #584]	; (8001860 <HAL_GPIO_Init+0x2b0>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d046      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
 800161c:	4a90      	ldr	r2, [pc, #576]	; (8001860 <HAL_GPIO_Init+0x2b0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d85d      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 8001622:	2b12      	cmp	r3, #18
 8001624:	d82a      	bhi.n	800167c <HAL_GPIO_Init+0xcc>
 8001626:	2b12      	cmp	r3, #18
 8001628:	d859      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 800162a:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <HAL_GPIO_Init+0x80>)
 800162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001630:	080016ab 	.word	0x080016ab
 8001634:	08001685 	.word	0x08001685
 8001638:	08001697 	.word	0x08001697
 800163c:	080016d9 	.word	0x080016d9
 8001640:	080016df 	.word	0x080016df
 8001644:	080016df 	.word	0x080016df
 8001648:	080016df 	.word	0x080016df
 800164c:	080016df 	.word	0x080016df
 8001650:	080016df 	.word	0x080016df
 8001654:	080016df 	.word	0x080016df
 8001658:	080016df 	.word	0x080016df
 800165c:	080016df 	.word	0x080016df
 8001660:	080016df 	.word	0x080016df
 8001664:	080016df 	.word	0x080016df
 8001668:	080016df 	.word	0x080016df
 800166c:	080016df 	.word	0x080016df
 8001670:	080016df 	.word	0x080016df
 8001674:	0800168d 	.word	0x0800168d
 8001678:	080016a1 	.word	0x080016a1
 800167c:	4a79      	ldr	r2, [pc, #484]	; (8001864 <HAL_GPIO_Init+0x2b4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d013      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001682:	e02c      	b.n	80016de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	623b      	str	r3, [r7, #32]
          break;
 800168a:	e029      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	3304      	adds	r3, #4
 8001692:	623b      	str	r3, [r7, #32]
          break;
 8001694:	e024      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	3308      	adds	r3, #8
 800169c:	623b      	str	r3, [r7, #32]
          break;
 800169e:	e01f      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	330c      	adds	r3, #12
 80016a6:	623b      	str	r3, [r7, #32]
          break;
 80016a8:	e01a      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d102      	bne.n	80016b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016b2:	2304      	movs	r3, #4
 80016b4:	623b      	str	r3, [r7, #32]
          break;
 80016b6:	e013      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d105      	bne.n	80016cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c0:	2308      	movs	r3, #8
 80016c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	611a      	str	r2, [r3, #16]
          break;
 80016ca:	e009      	b.n	80016e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016cc:	2308      	movs	r3, #8
 80016ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	615a      	str	r2, [r3, #20]
          break;
 80016d6:	e003      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
          break;
 80016dc:	e000      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          break;
 80016de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2bff      	cmp	r3, #255	; 0xff
 80016e4:	d801      	bhi.n	80016ea <HAL_GPIO_Init+0x13a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	e001      	b.n	80016ee <HAL_GPIO_Init+0x13e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3304      	adds	r3, #4
 80016ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2bff      	cmp	r3, #255	; 0xff
 80016f4:	d802      	bhi.n	80016fc <HAL_GPIO_Init+0x14c>
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	e002      	b.n	8001702 <HAL_GPIO_Init+0x152>
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	3b08      	subs	r3, #8
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	210f      	movs	r1, #15
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	fa01 f303 	lsl.w	r3, r1, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	401a      	ands	r2, r3
 8001714:	6a39      	ldr	r1, [r7, #32]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	431a      	orrs	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 80b1 	beq.w	8001892 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001730:	4b4d      	ldr	r3, [pc, #308]	; (8001868 <HAL_GPIO_Init+0x2b8>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a4c      	ldr	r2, [pc, #304]	; (8001868 <HAL_GPIO_Init+0x2b8>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <HAL_GPIO_Init+0x2b8>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001748:	4a48      	ldr	r2, [pc, #288]	; (800186c <HAL_GPIO_Init+0x2bc>)
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	3302      	adds	r3, #2
 8001750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001754:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	220f      	movs	r2, #15
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	4013      	ands	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a40      	ldr	r2, [pc, #256]	; (8001870 <HAL_GPIO_Init+0x2c0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d013      	beq.n	800179c <HAL_GPIO_Init+0x1ec>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a3f      	ldr	r2, [pc, #252]	; (8001874 <HAL_GPIO_Init+0x2c4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d00d      	beq.n	8001798 <HAL_GPIO_Init+0x1e8>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a3e      	ldr	r2, [pc, #248]	; (8001878 <HAL_GPIO_Init+0x2c8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d007      	beq.n	8001794 <HAL_GPIO_Init+0x1e4>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a3d      	ldr	r2, [pc, #244]	; (800187c <HAL_GPIO_Init+0x2cc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d101      	bne.n	8001790 <HAL_GPIO_Init+0x1e0>
 800178c:	2303      	movs	r3, #3
 800178e:	e006      	b.n	800179e <HAL_GPIO_Init+0x1ee>
 8001790:	2304      	movs	r3, #4
 8001792:	e004      	b.n	800179e <HAL_GPIO_Init+0x1ee>
 8001794:	2302      	movs	r3, #2
 8001796:	e002      	b.n	800179e <HAL_GPIO_Init+0x1ee>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <HAL_GPIO_Init+0x1ee>
 800179c:	2300      	movs	r3, #0
 800179e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a0:	f002 0203 	and.w	r2, r2, #3
 80017a4:	0092      	lsls	r2, r2, #2
 80017a6:	4093      	lsls	r3, r2
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017ae:	492f      	ldr	r1, [pc, #188]	; (800186c <HAL_GPIO_Init+0x2bc>)
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	3302      	adds	r3, #2
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	492c      	ldr	r1, [pc, #176]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	600b      	str	r3, [r1, #0]
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017d6:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	43db      	mvns	r3, r3
 80017de:	4928      	ldr	r1, [pc, #160]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d006      	beq.n	80017fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017f0:	4b23      	ldr	r3, [pc, #140]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	4922      	ldr	r1, [pc, #136]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	43db      	mvns	r3, r3
 8001806:	491e      	ldr	r1, [pc, #120]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 8001808:	4013      	ands	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	4918      	ldr	r1, [pc, #96]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]
 8001824:	e006      	b.n	8001834 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	43db      	mvns	r3, r3
 800182e:	4914      	ldr	r1, [pc, #80]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 8001830:	4013      	ands	r3, r2
 8001832:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d021      	beq.n	8001884 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	490e      	ldr	r1, [pc, #56]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	60cb      	str	r3, [r1, #12]
 800184c:	e021      	b.n	8001892 <HAL_GPIO_Init+0x2e2>
 800184e:	bf00      	nop
 8001850:	10320000 	.word	0x10320000
 8001854:	10310000 	.word	0x10310000
 8001858:	10220000 	.word	0x10220000
 800185c:	10210000 	.word	0x10210000
 8001860:	10120000 	.word	0x10120000
 8001864:	10110000 	.word	0x10110000
 8001868:	40021000 	.word	0x40021000
 800186c:	40010000 	.word	0x40010000
 8001870:	40010800 	.word	0x40010800
 8001874:	40010c00 	.word	0x40010c00
 8001878:	40011000 	.word	0x40011000
 800187c:	40011400 	.word	0x40011400
 8001880:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_GPIO_Init+0x304>)
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	43db      	mvns	r3, r3
 800188c:	4909      	ldr	r1, [pc, #36]	; (80018b4 <HAL_GPIO_Init+0x304>)
 800188e:	4013      	ands	r3, r2
 8001890:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	3301      	adds	r3, #1
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	fa22 f303 	lsr.w	r3, r2, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f47f ae8e 	bne.w	80015c4 <HAL_GPIO_Init+0x14>
  }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	372c      	adds	r7, #44	; 0x2c
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	40010400 	.word	0x40010400

080018b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
 80018c4:	4613      	mov	r3, r2
 80018c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c8:	787b      	ldrb	r3, [r7, #1]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018d4:	e003      	b.n	80018de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	041a      	lsls	r2, r3, #16
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	611a      	str	r2, [r3, #16]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e11b      	b.n	8001b32 <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d106      	bne.n	8001914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fba6 	bl	8001060 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2224      	movs	r2, #36	; 0x24
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800192c:	f000 ffde 	bl	80028ec <HAL_RCC_GetPCLK1Freq>
 8001930:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4a81      	ldr	r2, [pc, #516]	; (8001b3c <HAL_I2C_Init+0x254>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d807      	bhi.n	800194c <HAL_I2C_Init+0x64>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4a80      	ldr	r2, [pc, #512]	; (8001b40 <HAL_I2C_Init+0x258>)
 8001940:	4293      	cmp	r3, r2
 8001942:	bf94      	ite	ls
 8001944:	2301      	movls	r3, #1
 8001946:	2300      	movhi	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	e006      	b.n	800195a <HAL_I2C_Init+0x72>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4a7d      	ldr	r2, [pc, #500]	; (8001b44 <HAL_I2C_Init+0x25c>)
 8001950:	4293      	cmp	r3, r2
 8001952:	bf94      	ite	ls
 8001954:	2301      	movls	r3, #1
 8001956:	2300      	movhi	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0e7      	b.n	8001b32 <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4a78      	ldr	r2, [pc, #480]	; (8001b48 <HAL_I2C_Init+0x260>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0c9b      	lsrs	r3, r3, #18
 800196c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	430a      	orrs	r2, r1
 8001980:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4a6a      	ldr	r2, [pc, #424]	; (8001b3c <HAL_I2C_Init+0x254>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d802      	bhi.n	800199c <HAL_I2C_Init+0xb4>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	3301      	adds	r3, #1
 800199a:	e009      	b.n	80019b0 <HAL_I2C_Init+0xc8>
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019a2:	fb02 f303 	mul.w	r3, r2, r3
 80019a6:	4a69      	ldr	r2, [pc, #420]	; (8001b4c <HAL_I2C_Init+0x264>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	099b      	lsrs	r3, r3, #6
 80019ae:	3301      	adds	r3, #1
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	430b      	orrs	r3, r1
 80019b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	495c      	ldr	r1, [pc, #368]	; (8001b3c <HAL_I2C_Init+0x254>)
 80019cc:	428b      	cmp	r3, r1
 80019ce:	d819      	bhi.n	8001a04 <HAL_I2C_Init+0x11c>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1e59      	subs	r1, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fbb1 f3f3 	udiv	r3, r1, r3
 80019de:	1c59      	adds	r1, r3, #1
 80019e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019e4:	400b      	ands	r3, r1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00a      	beq.n	8001a00 <HAL_I2C_Init+0x118>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1e59      	subs	r1, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019f8:	3301      	adds	r3, #1
 80019fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fe:	e051      	b.n	8001aa4 <HAL_I2C_Init+0x1bc>
 8001a00:	2304      	movs	r3, #4
 8001a02:	e04f      	b.n	8001aa4 <HAL_I2C_Init+0x1bc>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d111      	bne.n	8001a30 <HAL_I2C_Init+0x148>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1e58      	subs	r0, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	440b      	add	r3, r1
 8001a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf0c      	ite	eq
 8001a28:	2301      	moveq	r3, #1
 8001a2a:	2300      	movne	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	e012      	b.n	8001a56 <HAL_I2C_Init+0x16e>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	0099      	lsls	r1, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a46:	3301      	adds	r3, #1
 8001a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Init+0x176>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e022      	b.n	8001aa4 <HAL_I2C_Init+0x1bc>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10e      	bne.n	8001a84 <HAL_I2C_Init+0x19c>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1e58      	subs	r0, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6859      	ldr	r1, [r3, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	440b      	add	r3, r1
 8001a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a82:	e00f      	b.n	8001aa4 <HAL_I2C_Init+0x1bc>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1e58      	subs	r0, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	0099      	lsls	r1, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	6809      	ldr	r1, [r1, #0]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69da      	ldr	r2, [r3, #28]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6911      	ldr	r1, [r2, #16]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68d2      	ldr	r2, [r2, #12]
 8001ade:	4311      	orrs	r1, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	000186a0 	.word	0x000186a0
 8001b40:	001e847f 	.word	0x001e847f
 8001b44:	003d08ff 	.word	0x003d08ff
 8001b48:	431bde83 	.word	0x431bde83
 8001b4c:	10624dd3 	.word	0x10624dd3

08001b50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	817b      	strh	r3, [r7, #10]
 8001b60:	4613      	mov	r3, r2
 8001b62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b64:	f7ff fbe8 	bl	8001338 <HAL_GetTick>
 8001b68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b20      	cmp	r3, #32
 8001b74:	f040 80e0 	bne.w	8001d38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2319      	movs	r3, #25
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4970      	ldr	r1, [pc, #448]	; (8001d44 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f958 	bl	8001e38 <I2C_WaitOnFlagUntilTimeout>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e0d3      	b.n	8001d3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_I2C_Master_Transmit+0x50>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e0cc      	b.n	8001d3a <HAL_I2C_Master_Transmit+0x1ea>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d007      	beq.n	8001bc6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0201 	orr.w	r2, r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2221      	movs	r2, #33	; 0x21
 8001bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2210      	movs	r2, #16
 8001be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	893a      	ldrh	r2, [r7, #8]
 8001bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4a50      	ldr	r2, [pc, #320]	; (8001d48 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c08:	8979      	ldrh	r1, [r7, #10]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	6a3a      	ldr	r2, [r7, #32]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f89c 	bl	8001d4c <I2C_MasterRequestWrite>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e08d      	b.n	8001d3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c34:	e066      	b.n	8001d04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	6a39      	ldr	r1, [r7, #32]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f9d2 	bl	8001fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00d      	beq.n	8001c62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d107      	bne.n	8001c5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06b      	b.n	8001d3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	781a      	ldrb	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d11b      	bne.n	8001cd8 <HAL_I2C_Master_Transmit+0x188>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d017      	beq.n	8001cd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	781a      	ldrb	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	6a39      	ldr	r1, [r7, #32]
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f9c2 	bl	8002066 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00d      	beq.n	8001d04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d107      	bne.n	8001d00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cfe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e01a      	b.n	8001d3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d194      	bne.n	8001c36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e000      	b.n	8001d3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
  }
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	00100002 	.word	0x00100002
 8001d48:	ffff0000 	.word	0xffff0000

08001d4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d006      	beq.n	8001d76 <I2C_MasterRequestWrite+0x2a>
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d003      	beq.n	8001d76 <I2C_MasterRequestWrite+0x2a>
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d74:	d108      	bne.n	8001d88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	e00b      	b.n	8001da0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	2b12      	cmp	r3, #18
 8001d8e:	d107      	bne.n	8001da0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 f843 	bl	8001e38 <I2C_WaitOnFlagUntilTimeout>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e035      	b.n	8001e28 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dc4:	d108      	bne.n	8001dd8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dc6:	897b      	ldrh	r3, [r7, #10]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dd4:	611a      	str	r2, [r3, #16]
 8001dd6:	e01b      	b.n	8001e10 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001dd8:	897b      	ldrh	r3, [r7, #10]
 8001dda:	11db      	asrs	r3, r3, #7
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f003 0306 	and.w	r3, r3, #6
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f063 030f 	orn	r3, r3, #15
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	490e      	ldr	r1, [pc, #56]	; (8001e30 <I2C_MasterRequestWrite+0xe4>)
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 f875 	bl	8001ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e010      	b.n	8001e28 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e06:	897b      	ldrh	r3, [r7, #10]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4907      	ldr	r1, [pc, #28]	; (8001e34 <I2C_MasterRequestWrite+0xe8>)
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 f865 	bl	8001ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	00010008 	.word	0x00010008
 8001e34:	00010002 	.word	0x00010002

08001e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	4613      	mov	r3, r2
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e48:	e025      	b.n	8001e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d021      	beq.n	8001e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e52:	f7ff fa71 	bl	8001338 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d302      	bcc.n	8001e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d116      	bne.n	8001e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f043 0220 	orr.w	r2, r3, #32
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e023      	b.n	8001ede <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	0c1b      	lsrs	r3, r3, #16
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d10d      	bne.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0x84>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	e00c      	b.n	8001ed6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf0c      	ite	eq
 8001ece:	2301      	moveq	r3, #1
 8001ed0:	2300      	movne	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d0b6      	beq.n	8001e4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ef4:	e051      	b.n	8001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f04:	d123      	bne.n	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f043 0204 	orr.w	r2, r3, #4
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e046      	b.n	8001fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d021      	beq.n	8001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f56:	f7ff f9ef 	bl	8001338 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d302      	bcc.n	8001f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d116      	bne.n	8001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2220      	movs	r2, #32
 8001f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f043 0220 	orr.w	r2, r3, #32
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e020      	b.n	8001fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	0c1b      	lsrs	r3, r3, #16
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d10c      	bne.n	8001fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	bf14      	ite	ne
 8001fb6:	2301      	movne	r3, #1
 8001fb8:	2300      	moveq	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	e00b      	b.n	8001fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	43da      	mvns	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d18d      	bne.n	8001ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ff0:	e02d      	b.n	800204e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f878 	bl	80020e8 <I2C_IsAcknowledgeFailed>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e02d      	b.n	800205e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d021      	beq.n	800204e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200a:	f7ff f995 	bl	8001338 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	429a      	cmp	r2, r3
 8002018:	d302      	bcc.n	8002020 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d116      	bne.n	800204e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f043 0220 	orr.w	r2, r3, #32
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e007      	b.n	800205e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002058:	2b80      	cmp	r3, #128	; 0x80
 800205a:	d1ca      	bne.n	8001ff2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002072:	e02d      	b.n	80020d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f837 	bl	80020e8 <I2C_IsAcknowledgeFailed>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e02d      	b.n	80020e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208a:	d021      	beq.n	80020d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208c:	f7ff f954 	bl	8001338 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	429a      	cmp	r2, r3
 800209a:	d302      	bcc.n	80020a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d116      	bne.n	80020d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	f043 0220 	orr.w	r2, r3, #32
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e007      	b.n	80020e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d1ca      	bne.n	8002074 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020fe:	d11b      	bne.n	8002138 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002108:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f043 0204 	orr.w	r2, r3, #4
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e272      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8087 	beq.w	8002272 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002164:	4b92      	ldr	r3, [pc, #584]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b04      	cmp	r3, #4
 800216e:	d00c      	beq.n	800218a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002170:	4b8f      	ldr	r3, [pc, #572]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b08      	cmp	r3, #8
 800217a:	d112      	bne.n	80021a2 <HAL_RCC_OscConfig+0x5e>
 800217c:	4b8c      	ldr	r3, [pc, #560]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002188:	d10b      	bne.n	80021a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218a:	4b89      	ldr	r3, [pc, #548]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d06c      	beq.n	8002270 <HAL_RCC_OscConfig+0x12c>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d168      	bne.n	8002270 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e24c      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x76>
 80021ac:	4b80      	ldr	r3, [pc, #512]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a7f      	ldr	r2, [pc, #508]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	e02e      	b.n	8002218 <HAL_RCC_OscConfig+0xd4>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x98>
 80021c2:	4b7b      	ldr	r3, [pc, #492]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a7a      	ldr	r2, [pc, #488]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b78      	ldr	r3, [pc, #480]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a77      	ldr	r2, [pc, #476]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e01d      	b.n	8002218 <HAL_RCC_OscConfig+0xd4>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0xbc>
 80021e6:	4b72      	ldr	r3, [pc, #456]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a71      	ldr	r2, [pc, #452]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	4b6f      	ldr	r3, [pc, #444]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a6e      	ldr	r2, [pc, #440]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e00b      	b.n	8002218 <HAL_RCC_OscConfig+0xd4>
 8002200:	4b6b      	ldr	r3, [pc, #428]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a6a      	ldr	r2, [pc, #424]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b68      	ldr	r3, [pc, #416]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a67      	ldr	r2, [pc, #412]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002216:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d013      	beq.n	8002248 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff f88a 	bl	8001338 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7ff f886 	bl	8001338 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e200      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	4b5d      	ldr	r3, [pc, #372]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0xe4>
 8002246:	e014      	b.n	8002272 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7ff f876 	bl	8001338 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002250:	f7ff f872 	bl	8001338 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	; 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e1ec      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x10c>
 800226e:	e000      	b.n	8002272 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d063      	beq.n	8002346 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800227e:	4b4c      	ldr	r3, [pc, #304]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00b      	beq.n	80022a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800228a:	4b49      	ldr	r3, [pc, #292]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b08      	cmp	r3, #8
 8002294:	d11c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x18c>
 8002296:	4b46      	ldr	r3, [pc, #280]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d116      	bne.n	80022d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	4b43      	ldr	r3, [pc, #268]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_RCC_OscConfig+0x176>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d001      	beq.n	80022ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e1c0      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4939      	ldr	r1, [pc, #228]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ce:	e03a      	b.n	8002346 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d020      	beq.n	800231a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d8:	4b36      	ldr	r3, [pc, #216]	; (80023b4 <HAL_RCC_OscConfig+0x270>)
 80022da:	2201      	movs	r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7ff f82b 	bl	8001338 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e6:	f7ff f827 	bl	8001338 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e1a1      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f8:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002304:	4b2a      	ldr	r3, [pc, #168]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4927      	ldr	r1, [pc, #156]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 8002314:	4313      	orrs	r3, r2
 8002316:	600b      	str	r3, [r1, #0]
 8002318:	e015      	b.n	8002346 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231a:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <HAL_RCC_OscConfig+0x270>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff f80a 	bl	8001338 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002328:	f7ff f806 	bl	8001338 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e180      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d03a      	beq.n	80023c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d019      	beq.n	800238e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235a:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 800235c:	2201      	movs	r2, #1
 800235e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002360:	f7fe ffea 	bl	8001338 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002368:	f7fe ffe6 	bl	8001338 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e160      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002386:	2001      	movs	r0, #1
 8002388:	f000 fac4 	bl	8002914 <RCC_Delay>
 800238c:	e01c      	b.n	80023c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002394:	f7fe ffd0 	bl	8001338 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239a:	e00f      	b.n	80023bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800239c:	f7fe ffcc 	bl	8001338 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d908      	bls.n	80023bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e146      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	42420000 	.word	0x42420000
 80023b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023bc:	4b92      	ldr	r3, [pc, #584]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1e9      	bne.n	800239c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80a6 	beq.w	8002522 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d6:	2300      	movs	r3, #0
 80023d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023da:	4b8b      	ldr	r3, [pc, #556]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10d      	bne.n	8002402 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e6:	4b88      	ldr	r3, [pc, #544]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	4a87      	ldr	r2, [pc, #540]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f0:	61d3      	str	r3, [r2, #28]
 80023f2:	4b85      	ldr	r3, [pc, #532]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fe:	2301      	movs	r3, #1
 8002400:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002402:	4b82      	ldr	r3, [pc, #520]	; (800260c <HAL_RCC_OscConfig+0x4c8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d118      	bne.n	8002440 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240e:	4b7f      	ldr	r3, [pc, #508]	; (800260c <HAL_RCC_OscConfig+0x4c8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a7e      	ldr	r2, [pc, #504]	; (800260c <HAL_RCC_OscConfig+0x4c8>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241a:	f7fe ff8d 	bl	8001338 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002422:	f7fe ff89 	bl	8001338 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b64      	cmp	r3, #100	; 0x64
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e103      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	4b75      	ldr	r3, [pc, #468]	; (800260c <HAL_RCC_OscConfig+0x4c8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x312>
 8002448:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4a6e      	ldr	r2, [pc, #440]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6213      	str	r3, [r2, #32]
 8002454:	e02d      	b.n	80024b2 <HAL_RCC_OscConfig+0x36e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x334>
 800245e:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4a69      	ldr	r2, [pc, #420]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	f023 0301 	bic.w	r3, r3, #1
 8002468:	6213      	str	r3, [r2, #32]
 800246a:	4b67      	ldr	r3, [pc, #412]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4a66      	ldr	r2, [pc, #408]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	f023 0304 	bic.w	r3, r3, #4
 8002474:	6213      	str	r3, [r2, #32]
 8002476:	e01c      	b.n	80024b2 <HAL_RCC_OscConfig+0x36e>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b05      	cmp	r3, #5
 800247e:	d10c      	bne.n	800249a <HAL_RCC_OscConfig+0x356>
 8002480:	4b61      	ldr	r3, [pc, #388]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4a60      	ldr	r2, [pc, #384]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 8002486:	f043 0304 	orr.w	r3, r3, #4
 800248a:	6213      	str	r3, [r2, #32]
 800248c:	4b5e      	ldr	r3, [pc, #376]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4a5d      	ldr	r2, [pc, #372]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6213      	str	r3, [r2, #32]
 8002498:	e00b      	b.n	80024b2 <HAL_RCC_OscConfig+0x36e>
 800249a:	4b5b      	ldr	r3, [pc, #364]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4a5a      	ldr	r2, [pc, #360]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	6213      	str	r3, [r2, #32]
 80024a6:	4b58      	ldr	r3, [pc, #352]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4a57      	ldr	r2, [pc, #348]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	f023 0304 	bic.w	r3, r3, #4
 80024b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d015      	beq.n	80024e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ba:	f7fe ff3d 	bl	8001338 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	e00a      	b.n	80024d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f7fe ff39 	bl	8001338 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e0b1      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	4b4b      	ldr	r3, [pc, #300]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0ee      	beq.n	80024c2 <HAL_RCC_OscConfig+0x37e>
 80024e4:	e014      	b.n	8002510 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e6:	f7fe ff27 	bl	8001338 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ec:	e00a      	b.n	8002504 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f7fe ff23 	bl	8001338 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e09b      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002504:	4b40      	ldr	r3, [pc, #256]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1ee      	bne.n	80024ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002510:	7dfb      	ldrb	r3, [r7, #23]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d105      	bne.n	8002522 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002516:	4b3c      	ldr	r3, [pc, #240]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4a3b      	ldr	r2, [pc, #236]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002520:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8087 	beq.w	800263a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800252c:	4b36      	ldr	r3, [pc, #216]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b08      	cmp	r3, #8
 8002536:	d061      	beq.n	80025fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d146      	bne.n	80025ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002540:	4b33      	ldr	r3, [pc, #204]	; (8002610 <HAL_RCC_OscConfig+0x4cc>)
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7fe fef7 	bl	8001338 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254e:	f7fe fef3 	bl	8001338 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e06d      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002560:	4b29      	ldr	r3, [pc, #164]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f0      	bne.n	800254e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002574:	d108      	bne.n	8002588 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002576:	4b24      	ldr	r3, [pc, #144]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	4921      	ldr	r1, [pc, #132]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002588:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a19      	ldr	r1, [r3, #32]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	430b      	orrs	r3, r1
 800259a:	491b      	ldr	r1, [pc, #108]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_RCC_OscConfig+0x4cc>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7fe fec7 	bl	8001338 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ae:	f7fe fec3 	bl	8001338 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e03d      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x46a>
 80025cc:	e035      	b.n	800263a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_RCC_OscConfig+0x4cc>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe feb0 	bl	8001338 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025dc:	f7fe feac 	bl	8001338 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e026      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x498>
 80025fa:	e01e      	b.n	800263a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d107      	bne.n	8002614 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e019      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>
 8002608:	40021000 	.word	0x40021000
 800260c:	40007000 	.word	0x40007000
 8002610:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_RCC_OscConfig+0x500>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	429a      	cmp	r2, r3
 8002626:	d106      	bne.n	8002636 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d001      	beq.n	800263a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000

08002648 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0d0      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800265c:	4b6a      	ldr	r3, [pc, #424]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d910      	bls.n	800268c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b67      	ldr	r3, [pc, #412]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 0207 	bic.w	r2, r3, #7
 8002672:	4965      	ldr	r1, [pc, #404]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b63      	ldr	r3, [pc, #396]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0b8      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a4:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a58      	ldr	r2, [pc, #352]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026bc:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4a52      	ldr	r2, [pc, #328]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c8:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	494d      	ldr	r1, [pc, #308]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d040      	beq.n	8002768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d115      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e07f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002706:	4b41      	ldr	r3, [pc, #260]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e073      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002716:	4b3d      	ldr	r3, [pc, #244]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e06b      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002726:	4b39      	ldr	r3, [pc, #228]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f023 0203 	bic.w	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4936      	ldr	r1, [pc, #216]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002738:	f7fe fdfe 	bl	8001338 <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	e00a      	b.n	8002756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002740:	f7fe fdfa 	bl	8001338 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e053      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 020c 	and.w	r2, r3, #12
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	429a      	cmp	r2, r3
 8002766:	d1eb      	bne.n	8002740 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002768:	4b27      	ldr	r3, [pc, #156]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d210      	bcs.n	8002798 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 0207 	bic.w	r2, r3, #7
 800277e:	4922      	ldr	r1, [pc, #136]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e032      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4916      	ldr	r1, [pc, #88]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	490e      	ldr	r1, [pc, #56]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027d6:	f000 f821 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	490a      	ldr	r1, [pc, #40]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 80027e8:	5ccb      	ldrb	r3, [r1, r3]
 80027ea:	fa22 f303 	lsr.w	r3, r2, r3
 80027ee:	4a09      	ldr	r2, [pc, #36]	; (8002814 <HAL_RCC_ClockConfig+0x1cc>)
 80027f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1d0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fd5c 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40022000 	.word	0x40022000
 800280c:	40021000 	.word	0x40021000
 8002810:	08003300 	.word	0x08003300
 8002814:	2000000c 	.word	0x2000000c
 8002818:	20000010 	.word	0x20000010

0800281c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800281c:	b490      	push	{r4, r7}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002822:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002824:	1d3c      	adds	r4, r7, #4
 8002826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800282c:	f240 2301 	movw	r3, #513	; 0x201
 8002830:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002846:	4b21      	ldr	r3, [pc, #132]	; (80028cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b04      	cmp	r3, #4
 8002854:	d002      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x40>
 8002856:	2b08      	cmp	r3, #8
 8002858:	d003      	beq.n	8002862 <HAL_RCC_GetSysClockFreq+0x46>
 800285a:	e02b      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800285c:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800285e:	623b      	str	r3, [r7, #32]
      break;
 8002860:	e02b      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	0c9b      	lsrs	r3, r3, #18
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	3328      	adds	r3, #40	; 0x28
 800286c:	443b      	add	r3, r7
 800286e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002872:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d012      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	0c5b      	lsrs	r3, r3, #17
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	3328      	adds	r3, #40	; 0x28
 800288a:	443b      	add	r3, r7
 800288c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002890:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002896:	fb03 f202 	mul.w	r2, r3, r2
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
 80028a2:	e004      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	4a0b      	ldr	r2, [pc, #44]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a8:	fb02 f303 	mul.w	r3, r2, r3
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	623b      	str	r3, [r7, #32]
      break;
 80028b2:	e002      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028b6:	623b      	str	r3, [r7, #32]
      break;
 80028b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ba:	6a3b      	ldr	r3, [r7, #32]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3728      	adds	r7, #40	; 0x28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc90      	pop	{r4, r7}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	080032f0 	.word	0x080032f0
 80028cc:	40021000 	.word	0x40021000
 80028d0:	007a1200 	.word	0x007a1200
 80028d4:	003d0900 	.word	0x003d0900

080028d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028dc:	4b02      	ldr	r3, [pc, #8]	; (80028e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80028de:	681b      	ldr	r3, [r3, #0]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr
 80028e8:	2000000c 	.word	0x2000000c

080028ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028f0:	f7ff fff2 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	4903      	ldr	r1, [pc, #12]	; (8002910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	08003310 	.word	0x08003310

08002914 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <RCC_Delay+0x34>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0a      	ldr	r2, [pc, #40]	; (800294c <RCC_Delay+0x38>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	0a5b      	lsrs	r3, r3, #9
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	fb02 f303 	mul.w	r3, r2, r3
 800292e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002930:	bf00      	nop
  }
  while (Delay --);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1e5a      	subs	r2, r3, #1
 8002936:	60fa      	str	r2, [r7, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f9      	bne.n	8002930 <RCC_Delay+0x1c>
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr
 8002948:	2000000c 	.word	0x2000000c
 800294c:	10624dd3 	.word	0x10624dd3

08002950 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e01d      	b.n	800299e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fbb0 	bl	80010dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f000 fa7e 	bl	8002e90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b0c      	cmp	r3, #12
 80029b6:	d841      	bhi.n	8002a3c <HAL_TIM_IC_Start_IT+0x94>
 80029b8:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <HAL_TIM_IC_Start_IT+0x18>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	080029f5 	.word	0x080029f5
 80029c4:	08002a3d 	.word	0x08002a3d
 80029c8:	08002a3d 	.word	0x08002a3d
 80029cc:	08002a3d 	.word	0x08002a3d
 80029d0:	08002a07 	.word	0x08002a07
 80029d4:	08002a3d 	.word	0x08002a3d
 80029d8:	08002a3d 	.word	0x08002a3d
 80029dc:	08002a3d 	.word	0x08002a3d
 80029e0:	08002a19 	.word	0x08002a19
 80029e4:	08002a3d 	.word	0x08002a3d
 80029e8:	08002a3d 	.word	0x08002a3d
 80029ec:	08002a3d 	.word	0x08002a3d
 80029f0:	08002a2b 	.word	0x08002a2b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0202 	orr.w	r2, r2, #2
 8002a02:	60da      	str	r2, [r3, #12]
      break;
 8002a04:	e01b      	b.n	8002a3e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0204 	orr.w	r2, r2, #4
 8002a14:	60da      	str	r2, [r3, #12]
      break;
 8002a16:	e012      	b.n	8002a3e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0208 	orr.w	r2, r2, #8
 8002a26:	60da      	str	r2, [r3, #12]
      break;
 8002a28:	e009      	b.n	8002a3e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0210 	orr.w	r2, r2, #16
 8002a38:	60da      	str	r2, [r3, #12]
      break;
 8002a3a:	e000      	b.n	8002a3e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002a3c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2201      	movs	r2, #1
 8002a44:	6839      	ldr	r1, [r7, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fb91 	bl	800316e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d007      	beq.n	8002a6e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d122      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d11b      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0202 	mvn.w	r2, #2
 8002aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe f820 	bl	8000b00 <HAL_TIM_IC_CaptureCallback>
 8002ac0:	e005      	b.n	8002ace <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f9c9 	bl	8002e5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f9cf 	bl	8002e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d122      	bne.n	8002b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d11b      	bne.n	8002b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0204 	mvn.w	r2, #4
 8002af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fd fff6 	bl	8000b00 <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f99f 	bl	8002e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f9a5 	bl	8002e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d122      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d11b      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0208 	mvn.w	r2, #8
 8002b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2204      	movs	r2, #4
 8002b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fd ffcc 	bl	8000b00 <HAL_TIM_IC_CaptureCallback>
 8002b68:	e005      	b.n	8002b76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f975 	bl	8002e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f97b 	bl	8002e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	d122      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d11b      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0210 	mvn.w	r2, #16
 8002ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fd ffa2 	bl	8000b00 <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e005      	b.n	8002bca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f94b 	bl	8002e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f951 	bl	8002e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d10e      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d107      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0201 	mvn.w	r2, #1
 8002bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f926 	bl	8002e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	2b80      	cmp	r3, #128	; 0x80
 8002c08:	d10e      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c14:	2b80      	cmp	r3, #128	; 0x80
 8002c16:	d107      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fb14 	bl	8003250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d10e      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c40:	2b40      	cmp	r3, #64	; 0x40
 8002c42:	d107      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f915 	bl	8002e7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d10e      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d107      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0220 	mvn.w	r2, #32
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fadf 	bl	800323e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e08a      	b.n	8002db8 <HAL_TIM_IC_ConfigChannel+0x130>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2202      	movs	r2, #2
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d11b      	bne.n	8002cf0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	6819      	ldr	r1, [r3, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f000 f944 	bl	8002f54 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 020c 	bic.w	r2, r2, #12
 8002cda:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6999      	ldr	r1, [r3, #24]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	619a      	str	r2, [r3, #24]
 8002cee:	e05a      	b.n	8002da6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d11c      	bne.n	8002d30 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	6819      	ldr	r1, [r3, #0]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f000 f97f 	bl	8003008 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d18:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6999      	ldr	r1, [r3, #24]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	021a      	lsls	r2, r3, #8
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	619a      	str	r2, [r3, #24]
 8002d2e:	e03a      	b.n	8002da6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d11b      	bne.n	8002d6e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	6819      	ldr	r1, [r3, #0]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f000 f99b 	bl	8003080 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 020c 	bic.w	r2, r2, #12
 8002d58:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69d9      	ldr	r1, [r3, #28]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	61da      	str	r2, [r3, #28]
 8002d6c:	e01b      	b.n	8002da6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	6819      	ldr	r1, [r3, #0]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f000 f9ba 	bl	80030f6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d90:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69d9      	ldr	r1, [r3, #28]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	021a      	lsls	r2, r3, #8
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b0c      	cmp	r3, #12
 8002dd2:	d831      	bhi.n	8002e38 <HAL_TIM_ReadCapturedValue+0x78>
 8002dd4:	a201      	add	r2, pc, #4	; (adr r2, 8002ddc <HAL_TIM_ReadCapturedValue+0x1c>)
 8002dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dda:	bf00      	nop
 8002ddc:	08002e11 	.word	0x08002e11
 8002de0:	08002e39 	.word	0x08002e39
 8002de4:	08002e39 	.word	0x08002e39
 8002de8:	08002e39 	.word	0x08002e39
 8002dec:	08002e1b 	.word	0x08002e1b
 8002df0:	08002e39 	.word	0x08002e39
 8002df4:	08002e39 	.word	0x08002e39
 8002df8:	08002e39 	.word	0x08002e39
 8002dfc:	08002e25 	.word	0x08002e25
 8002e00:	08002e39 	.word	0x08002e39
 8002e04:	08002e39 	.word	0x08002e39
 8002e08:	08002e39 	.word	0x08002e39
 8002e0c:	08002e2f 	.word	0x08002e2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e16:	60fb      	str	r3, [r7, #12]

      break;
 8002e18:	e00f      	b.n	8002e3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	60fb      	str	r3, [r7, #12]

      break;
 8002e22:	e00a      	b.n	8002e3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	60fb      	str	r3, [r7, #12]

      break;
 8002e2c:	e005      	b.n	8002e3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	60fb      	str	r3, [r7, #12]

      break;
 8002e36:	e000      	b.n	8002e3a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002e38:	bf00      	nop
  }

  return tmpreg;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop

08002e48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a29      	ldr	r2, [pc, #164]	; (8002f48 <TIM_Base_SetConfig+0xb8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00b      	beq.n	8002ec0 <TIM_Base_SetConfig+0x30>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eae:	d007      	beq.n	8002ec0 <TIM_Base_SetConfig+0x30>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a26      	ldr	r2, [pc, #152]	; (8002f4c <TIM_Base_SetConfig+0xbc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <TIM_Base_SetConfig+0x30>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a25      	ldr	r2, [pc, #148]	; (8002f50 <TIM_Base_SetConfig+0xc0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d108      	bne.n	8002ed2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <TIM_Base_SetConfig+0xb8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00b      	beq.n	8002ef2 <TIM_Base_SetConfig+0x62>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee0:	d007      	beq.n	8002ef2 <TIM_Base_SetConfig+0x62>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a19      	ldr	r2, [pc, #100]	; (8002f4c <TIM_Base_SetConfig+0xbc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d003      	beq.n	8002ef2 <TIM_Base_SetConfig+0x62>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a18      	ldr	r2, [pc, #96]	; (8002f50 <TIM_Base_SetConfig+0xc0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d108      	bne.n	8002f04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a07      	ldr	r2, [pc, #28]	; (8002f48 <TIM_Base_SetConfig+0xb8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d103      	bne.n	8002f38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	615a      	str	r2, [r3, #20]
}
 8002f3e:	bf00      	nop
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr
 8002f48:	40012c00 	.word	0x40012c00
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40000800 	.word	0x40000800

08002f54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f023 0201 	bic.w	r2, r3, #1
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4a1f      	ldr	r2, [pc, #124]	; (8002ffc <TIM_TI1_SetConfig+0xa8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00b      	beq.n	8002f9a <TIM_TI1_SetConfig+0x46>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f88:	d007      	beq.n	8002f9a <TIM_TI1_SetConfig+0x46>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4a1c      	ldr	r2, [pc, #112]	; (8003000 <TIM_TI1_SetConfig+0xac>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d003      	beq.n	8002f9a <TIM_TI1_SetConfig+0x46>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <TIM_TI1_SetConfig+0xb0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d101      	bne.n	8002f9e <TIM_TI1_SetConfig+0x4a>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <TIM_TI1_SetConfig+0x4c>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	e003      	b.n	8002fbe <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f023 030a 	bic.w	r3, r3, #10
 8002fd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f003 030a 	and.w	r3, r3, #10
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	621a      	str	r2, [r3, #32]
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	40000400 	.word	0x40000400
 8003004:	40000800 	.word	0x40000800

08003008 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	f023 0210 	bic.w	r2, r3, #16
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003034:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003046:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	031b      	lsls	r3, r3, #12
 800304c:	b29b      	uxth	r3, r3
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800305a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	621a      	str	r2, [r3, #32]
}
 8003076:	bf00      	nop
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f023 0303 	bic.w	r3, r3, #3
 80030ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	621a      	str	r2, [r3, #32]
}
 80030ec:	bf00      	nop
 80030ee:	371c      	adds	r7, #28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr

080030f6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b087      	sub	sp, #28
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003122:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	4313      	orrs	r3, r2
 800312c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003134:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	031b      	lsls	r3, r3, #12
 800313a:	b29b      	uxth	r3, r3
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003148:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	031b      	lsls	r3, r3, #12
 800314e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	621a      	str	r2, [r3, #32]
}
 8003164:	bf00      	nop
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800316e:	b480      	push	{r7}
 8003170:	b087      	sub	sp, #28
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	2201      	movs	r2, #1
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a1a      	ldr	r2, [r3, #32]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	43db      	mvns	r3, r3
 8003190:	401a      	ands	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a1a      	ldr	r2, [r3, #32]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	431a      	orrs	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	621a      	str	r2, [r3, #32]
}
 80031ac:	bf00      	nop
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr

080031b6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e032      	b.n	8003234 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2202      	movs	r2, #2
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003206:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	4313      	orrs	r3, r2
 8003210:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <memset>:
 8003262:	4603      	mov	r3, r0
 8003264:	4402      	add	r2, r0
 8003266:	4293      	cmp	r3, r2
 8003268:	d100      	bne.n	800326c <memset+0xa>
 800326a:	4770      	bx	lr
 800326c:	f803 1b01 	strb.w	r1, [r3], #1
 8003270:	e7f9      	b.n	8003266 <memset+0x4>
	...

08003274 <__libc_init_array>:
 8003274:	b570      	push	{r4, r5, r6, lr}
 8003276:	2600      	movs	r6, #0
 8003278:	4d0c      	ldr	r5, [pc, #48]	; (80032ac <__libc_init_array+0x38>)
 800327a:	4c0d      	ldr	r4, [pc, #52]	; (80032b0 <__libc_init_array+0x3c>)
 800327c:	1b64      	subs	r4, r4, r5
 800327e:	10a4      	asrs	r4, r4, #2
 8003280:	42a6      	cmp	r6, r4
 8003282:	d109      	bne.n	8003298 <__libc_init_array+0x24>
 8003284:	f000 f81a 	bl	80032bc <_init>
 8003288:	2600      	movs	r6, #0
 800328a:	4d0a      	ldr	r5, [pc, #40]	; (80032b4 <__libc_init_array+0x40>)
 800328c:	4c0a      	ldr	r4, [pc, #40]	; (80032b8 <__libc_init_array+0x44>)
 800328e:	1b64      	subs	r4, r4, r5
 8003290:	10a4      	asrs	r4, r4, #2
 8003292:	42a6      	cmp	r6, r4
 8003294:	d105      	bne.n	80032a2 <__libc_init_array+0x2e>
 8003296:	bd70      	pop	{r4, r5, r6, pc}
 8003298:	f855 3b04 	ldr.w	r3, [r5], #4
 800329c:	4798      	blx	r3
 800329e:	3601      	adds	r6, #1
 80032a0:	e7ee      	b.n	8003280 <__libc_init_array+0xc>
 80032a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a6:	4798      	blx	r3
 80032a8:	3601      	adds	r6, #1
 80032aa:	e7f2      	b.n	8003292 <__libc_init_array+0x1e>
 80032ac:	08003318 	.word	0x08003318
 80032b0:	08003318 	.word	0x08003318
 80032b4:	08003318 	.word	0x08003318
 80032b8:	0800331c 	.word	0x0800331c

080032bc <_init>:
 80032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032be:	bf00      	nop
 80032c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032c2:	bc08      	pop	{r3}
 80032c4:	469e      	mov	lr, r3
 80032c6:	4770      	bx	lr

080032c8 <_fini>:
 80032c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ca:	bf00      	nop
 80032cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ce:	bc08      	pop	{r3}
 80032d0:	469e      	mov	lr, r3
 80032d2:	4770      	bx	lr
